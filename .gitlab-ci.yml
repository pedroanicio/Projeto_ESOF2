# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: maven:3.8.5-openjdk-17-slim

before_script:
   - apt-get update
   - apt-get install -y docker.io
   - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"

services:
  - docker:24.0.2-dind

variables:
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_DRIVER: "overlay2"
  DOCKER_TLS_CERTDIR: ""

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - package
  - deploy

build_config_server:
  stage: build
  script:
    - cd config_server
    - mvn clean package -DskipTests
  rules:
    - changes:
        - config_server
  artifacts:
    paths:
      - config_server/target/*.jar

build_discovery_server:
  stage: build
  script:
    - cd discovery_server
    - mvn clean package -DskipTests
  artifacts:
    paths:
      - discovery_server/target/*.jar

build_api_gateway:
  stage: build
  script:
    - cd api_gateway
    - mvn clean package -DskipTests
  artifacts:
    paths:
      - api_gateway/target/*.jar

build_cambio_service:
  stage: build
  script:
    - cd cambio_service
    - mvn clean package -DskipTests
  artifacts:
    paths:
      - cambio_service/target/*.jar

build_length_service:
  stage: build
  script:
    - cd length_service
    - mvn clean package -DskipTests
  artifacts:
    paths:
      - length_service/target/*.jar

build_conversion_service:
  stage: build
  script:
    - cd conversion_service
    - mvn clean package -DskipTests
  artifacts:
    paths:
      - conversion_service/target/*.jar

#etapa de testes
test_cambio_service:
  stage: test
  script:
    - cd cambio_service
    - mvn test 

test_length_service:
  stage: test
  script:
    - cd length_service
    - mvn test 

test_conversion_service:
  stage: test
  script:
    - cd conversion_service
    - mvn test 

# Adicionando a etapa de construção de imagens Docker
package_config_server_image:
  stage: package
  script:
    - docker build -t pedroaniciodev/config_server:latest -f config_server/Dockerfile .
    - docker save pedroaniciodev/config_server:latest -o config_server.tar
  artifacts:
    paths:
      - config_server.tar
  tags:
    - docker

package_discovery_server_image:
  stage: package
  script:
    - docker build -t pedroaniciodev/discovery_server:latest -f discovery_server/Dockerfile .
    - docker save pedroaniciodev/discovery_server:latest -o discovery_server.tar
  artifacts:
    paths:
      - discovery_server.tar
  tags:
    - docker

package_api_gateway_image:
  stage: package
  script:
    - docker build -t pedroaniciodev/api_gateway:latest -f api_gateway/Dockerfile .
    - docker save pedroaniciodev/api_gateway:latest -o api_gateway.tar
  artifacts:
    paths:
      - api_gateway.tar
  tags:
    - docker

package_cambio_service_image:
  stage: package
  script:
    - docker build -t pedroaniciodev/cambio_service:latest -f cambio_service/Dockerfile .
    - docker save pedroaniciodev/cambio_service:latest -o cambio_service.tar
  artifacts:
    paths:
      - cambio_service.tar
  tags:
    - docker

package_length_service_image:
  stage: package
  script:
    - docker build -t pedroaniciodev/length_service:latest -f length_service/Dockerfile .
    - docker save pedroaniciodev/length_service:latest -o length_service.tar
  artifacts:
    paths:
      - length_service.tar
  tags:
    - docker

package_conversion_service_image:
  stage: package
  script:
    - docker build -t pedroaniciodev/conversion_service:latest -f conversion_service/Dockerfile .
    - docker save pedroaniciodev/conversion_service:latest -o conversion_service.tar
  artifacts:
    paths:
      - conversion_service.tar
  tags:
    - docker

# deploy das imagens no docker hub
deploy-job:
  stage: deploy
  script:
    - docker load -i config_server.tar
    - docker load -i discovery_server.tar
    - docker load -i api_gateway.tar
    - docker load -i cambio_service.tar
    - docker load -i length_service.tar
    - docker load -i conversion_service.tar
    - echo "Starting deployment to Docker Hub..."
    - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
    - docker push pedroaniciodev/config_server:latest
    - docker push pedroaniciodev/discovery_server:latest
    - docker push pedroaniciodev/api_gateway:latest
    - docker push pedroaniciodev/cambio_service:latest
    - docker push pedroaniciodev/length_service:latest
    - docker push pedroaniciodev/conversion_service:latest
    - echo "Deployment to Docker Hub completed successfully."
  only:
    - main  # ou a branch que você deseja que o deploy ocorra
  tags:
    - docker
